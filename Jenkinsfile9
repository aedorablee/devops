pipeline {
    agent any

    environment {
        AWS_DEFAULT_REGION = "us-east-1"
	EKS_API = "https://FDC7C0E40970909EA38F748D9398197B.gr7.us-east-1.eks.amazonaws.com"
	EKS_CLUSTER_NAME = "ajkim-eks-cluster"
	EKS_JENKINS_CREDENTIAL_ID = "kubectl-deploy-credentials"
        ECR_REGISTRY = "203754240973.dkr.ecr.us-east-1.amazonaws.com"
	ECR_REPOSITORY = "ajkim-repository"
	IMAGE_TAG = "jenkins-eks-test"
	AWS_CREDENTIAL_ID = "jenkins-aws-devops-credentials"
    }
    stages {
        stage('1. Clone repository') {
	    steps {
                checkout scm
		sh "git pull origin devops"
	    }
        }
        stage('2. Build and Push image') {
	    steps {
		script { 
                    docker.withRegistry("https://${ECR_REGISTRY}", "ecr:${AWS_DEFAULT_REGION}:${AWS_CREDENTIAL_ID}") {
			def customImage = docker.build("${ECR_REGISTRY}/${ECR_REPOSITORY}:${env.BUILD_NUMBER}")
			customImage.push()
            	    }			
	    	}	
	    }
	}
	stage('3. Deploy to k8s') {
	    steps {
		script {
		    withKubeConfig([credentialsId: "${EKS_JENKINS_CREDENTIAL_ID}",
			serverUrl: "${EKS_API}",
			clusterName: "${EKS_CLUSTER_NAME}"]) {
				sh "sed -i s%ajkim-repository:.*%ajkim-repository:${env.BUILD_NUMBER}%g deployment.yaml"
				sh "cat deployment.yaml | grep image"
            			sh "aws eks --region ${AWS_DEFAULT_REGION} update-kubeconfig --name ${EKS_CLUSTER_NAME}"
				sh "kubectl get nodes"
				sh "whoami"
            			sh "kubectl apply -f deployment.yaml"
				sh "kubectl get pods -n cd"
	    		}			
	    	}
	    }
	}
    }
}
